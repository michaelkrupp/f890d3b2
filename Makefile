include makefile.mk

DOCKER_COMPOSE ?= docker-compose
ENTR ?= entr
GIT ?= git
GO ?= go
GOTESTSUM ?= gotestsum
JQ ?= jq
PROX ?= prox
XARGS ?= xargs

srcfiles != $(GIT) ls-files -cmo --exclude-standard --deduplicate
srcfiles := $(sort $(wildcard $(srcfiles)))

cmds := $(sort $(notdir $(realpath $(dir $(wildcard cmd/*/main.go)))))

watchers = test testsum
watchers += build $(foreach w,$(cmds),build.$(w))
watchers += run $(foreach w,$(cmds),run.$(w))
watch_index = var/watch.idx

envfile = $(wildcard .env)
dotenv = $(if $(envfile),set -a && . $(envfile) && set +a &&,)

procfile = Procfile
procfile_runner = $(PROX) start --socket var/prox.sock -e .env
gotest = $(GO) test -json --tags=all ./...
testdox = $(GOTESTSUM) --raw-command\
	-- sh -c "$(gotest) | $(JQ) -s -c 'sort_by(.Package) | group_by(.Package) | map(.[])[]'"

buildflags = -ldflags="-extldflags=-static -s -w"


ifdef watchers
define watch
$(ENTR) < $(watch_index)  -c -d -r -- $(MAKE) $(1)
endef

.PHONY: watch.% ## [watch] Same as `%`, but automatically reloads on file changes
$(foreach w,$(watchers),$(eval watch.$(w): $(watch_index); $(call watch,$(w))))

.PHONY: $(watch_index)
.INTERMEDIATE: $(watch_index)
$(watch_index): $(srcfiles)
	@ echo $(sort $(srcfiles)) | tr ' ' '\n' > $@
endif


.PHONY: dev ## Install development tools
dev:
	$(GO) install github.com/fgrosse/prox/cmd/prox@latest
	$(GO) install gotest.tools/gotestsum@latest


ifdef cmds
.PHONY: build ## [build] Build the project
build: $(foreach w,$(cmds),build/$(w).bin)

build/%.bin: export CGO_ENABLED=0
build/%.bin: go.sum $(MAKEFILE_LIST) $(srcfiles)
	$(GO) build -v -mod=readonly $(buildflags) -o ./$@ ./cmd/$*

.PHONY: build.% ## [build] Build `%` from source
$(foreach w,$(cmds),$(eval build.$(w): build/$(w).bin))
endif


ifdef cmds
.PHONY: run ## [run] Run the project
run: $(procfile)
	$(procfile_runner) -f $(procfile)

.PHONY: $(procfile)
$(procfile):
	@ echo "# This file is automatically generated. Do not edit." > $@
	@ echo $(cmds) | $(XARGS) -n 1 -- sh -c 'echo "$$1: make run.$$1"' _ >> $@

.PHONY: run.% ## [run] Same as `%`, but automatically reloads on file changes
$(foreach w,$(cmds),$(eval run.$(w): .run.$(w)))
endif

.PHONY: .run.%
.run.%:
	$(dotenv) $(GO) run -mod=readonly ./cmd/$*


.PHONY: test ## [test] Run tests
test: go.sum
	$(GO) clean -testcache
	$(GO) test --tags=all ./...

.PHONY: testsum ## [test] Run tests with gotestsum
testsum: go.sum
	@ $(GO) clean -testcache
	@ $(testdox)

go.sum: go.mod
	$(GO) mod tidy
	$(GO) mod download


.PHONY: docker ## Build and run the project in via docker-compose
docker: | build
	$(DOCKER_COMPOSE) down -v
	$(DOCKER_COMPOSE) up --build